Object subclass: DuelGameWithGUI [    | board players currentPlayer winner categories timer startTime |    "Inicializar el juego con un tablero vacío y jugadores"    DuelGameWithGUI >> initialize [        board := Array new: 5. "Tablero de 5x5"        board withAll: [ Array new: 5 withAll: nil ]. "Tablero vacío"                players := { 'Jugador1' . 'Jugador2' }.        currentPlayer := players first. "El primer jugador es el actual"        winner := nil.        categories := Dictionary new.    ]    "Método para cargar las preguntas desde un archivo CSV"    DuelGameWithGUI >> loadQuestionsFromFile [        | file content lines category question answer |        file := FileStream readOnlyFileNamed: 'questions.csv'.        content := file contentsOfEntireFile.        file close.                lines := content lines.        lines do: [ :line |            | parts |            parts := line substrings: ','.            category := parts first.            question := parts second.            answer := parts third.                        categories at: category ifAbsentPut: [ Dictionary new ].            (categories at: category) at: question put: answer.        ].    ]    "Método para elegir una categoría aleatoria"    DuelGameWithGUI >> chooseCategory [        ^categories keys atRandom.    ]    "Método para elegir una pregunta aleatoria de una categoría"    DuelGameWithGUI >> chooseQuestionFrom: category [        | questions question answer |        questions := categories at: category ifAbsent: [ ^nil ].        question := questions keys atRandom.        answer := questions at: question.        ^question -> answer.    ]    "Método para iniciar un duelo entre dos jugadores"    DuelGameWithGUI >> duelWith: player1 at: coords1 player2: player2 at: coords2 [        | category question answer playerAnswer |        category := self chooseCategory.        (question -> answer) := self chooseQuestionFrom: category.                Transcript show: 'Categoría: ', category; cr.        Transcript show: 'Pregunta: ', question; cr.                "Simulación de respuesta (esto debe integrarse con GUI)"        playerAnswer := 'A'. "Ejemplo de respuesta fija"        playerAnswer = answer ifTrue: [            Transcript show: player1, ' gana la celda en ', coords1 asString; cr.            winner := player1.        ] ifFalse: [            Transcript show: player2, ' gana la celda en ', coords2 asString; cr.            winner := player2.        ].    ]    "Método para verificar el estado del juego"    DuelGameWithGUI >> checkWinner [        | emptyCells |        emptyCells := board inject: 0 into: [ :count :row |            count + (row count: [ :cell | cell isNil ])        ].        emptyCells = 0 ifTrue: [            winner ifNil: [ Transcript show: '¡El juego termina en empate!'; cr ].            ^winner.        ].        ^nil.    ]    "Método para iniciar el juego"    DuelGameWithGUI >> startGame [        self initialize.        self loadQuestionsFromFile.        Transcript show: '¡Juego iniciado!'; cr.    ]]