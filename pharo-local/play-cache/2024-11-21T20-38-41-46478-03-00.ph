Object subclass: DuelGame [        | board players currentPlayer winner |        "Inicializar el juego con un tablero y jugadores"    board := Array new: 5. "Tablero de 5x5"    board withAll: [ Array new: 5 withAll: nil ]. "Tablero vacío"        players := { 'Jugador1' 'Jugador2' }.    currentPlayer := players first. "El primer jugador es el actual"    winner := nil.        "Método para mostrar el tablero"    printBoard [        board do: [ :row |            row do: [ :cell |                cell ifNil: [ 'X' ] ifNotNil: [ cell print ].                ' ' display.            ].            ' ' displayNl.        ].    ]        "Método para seleccionar una categoría"    chooseCategory [        ^Array new: 3 with: 'Historia' with: 'Ciencia' with: 'Deportes'.    ]        "Método para iniciar un duelo entre dos jugadores"    duelWith: player1 at: (x1 y: y1) player2: player2 at: (x2 y: y2) [        | category winnerCategory |        category := self chooseCategory atRandom.  "Seleccionamos una categoría aleatoria"                "Simulamos el duelo dependiendo de la categoría elegida"        winnerCategory := category = 'Ciencia' ifTrue: [ 'Jugador1' ] ifFalse: [ 'Jugador2' ].                winner := winnerCategory = 'Jugador1' ifTrue: [ player1 ] ifFalse: [ player2 ].        self conquerCell: winner at: (x2 y: y2).    ]        "Método para conquistar una casilla"    conquerCell: player at: (x y: y) [        (board at: x at: y) ifNil: [             board at: x at: y put: player.            'Casilla conquistada por ', player. displayNl.        ] ifNotNil: [             'Esta casilla ya está ocupada'. displayNl.        ].    ]        "Método para verificar el estado del juego"    checkWinner [        board do: [ :row |            row do: [ :cell |                cell = nil ifTrue: [ ^self ].            ].        ].        winner := currentPlayer.        '¡El ganador es ', winner, '!' displayNl.        ^self.    ]        "Método para jugar un turno"    playTurn [        | x y |        "Pedir al jugador actual que seleccione una casilla para desafiar a un oponente"        "Aquí, por simplicidad, asumimos que el jugador elige una casilla adyacente."        x := 3. y := 3. "Ejemplo de casilla elegida"                currentPlayer = players first             ifTrue: [ self duelWith: 'Jugador1' at: (x y: y) player2: 'Jugador2' at: (x+1 y: y) ]            ifFalse: [ self duelWith: 'Jugador2' at: (x+1 y: y) player2: 'Jugador1' at: (x y: y) ].                self checkWinner.                "Cambiar de jugador"        currentPlayer := currentPlayer = 'Jugador1' ifTrue: [ 'Jugador2' ] ifFalse: [ 'Jugador1' ].    ]]"Ejemplo de ejecución"| juego |juego := DuelGame new.juego.playTurn.